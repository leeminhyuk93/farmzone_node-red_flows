[
  {
    "id": "3d5f5c20eed11be6",
    "type": "tab",
    "label": "사세 작성",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "d0ae13d976d2815f",
    "type": "MySQLdatabase",
    "name": "",
    "host": "127.0.0.1",
    "port": "3306",
    "db": "mydb",
    "tz": "",
    "charset": "UTF8"
  },
  {
    "id": "fa96ea3b63181adc",
    "type": "tcp in",
    "z": "3d5f5c20eed11be6",
    "name": "이시다1",
    "server": "server",
    "host": "192.168.222.206",
    "port": "5001",
    "datamode": "stream",
    "datatype": "buffer",
    "newline": "",
    "topic": "",
    "trim": false,
    "base64": false,
    "tls": "",
    "x": 70,
    "y": 160,
    "wires": [
      [
        "ae87d7ad902002dc"
      ]
    ]
  },
  {
    "id": "ae87d7ad902002dc",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "출력 버퍼 검사",
    "func": "var detectionData = msg.payload;\n\n\n// 버퍼의 길이가 40만 이상이면 종료\nif(detectionData.length > 400000) {\n    msg.state = \"false\";\n    msg.topic = \"Error: 버퍼의 길이가 400,000 이상입니다.\"\n}\n\n\n// 'LF'가 존재하는지 확인\nvar buffData = Buffer.from(detectionData);\nvar indexOfLf = buffData.indexOf(0x0A);\n\n// 'LF'가 존재한다면\nif(indexOfLf != -1) {\n    // CR, LF를 제외한 버퍼 데이터의 길이 만큼 buffData에 저장\n    buffData = buffData.subarray(0, indexOfLf - 1);\n\n    // 데이터의 길이가 24이하면 정상 데이터가 아니므로 에러 출력\n    if(buffData.length < 24) {\n        msg.state = \"false\";\n        msg.topic = \"Error, 데이터의 길이가 24보다 작습니다. (정상데이터가 아닙니다.)\";\n        return msg;\n    }\n    \n    msg.state = \"true\";\n    msg.payload = buffData; \n    \n} else {\n    msg.state = \"false\";\n    msg.topic = \"Error: LF(라인피드)가 버퍼에 존재하지 않습니다.\";\n}\n\nreturn msg;\n\n\n\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 160,
    "wires": [
      [
        "a2773e3354cae5dc"
      ]
    ]
  },
  {
    "id": "900da682280a0ae0",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "문자열 슬라이싱",
    "func": "// KSC5601 DECODE STRING\nvar str = msg.payload;\n\n// 검출기 반응 시각\nvar dateValue = str.split(\" \")[0]; // 날짜 부분\nvar timeValue = str.split(\" \")[1].slice(0, str.split(\" \")[1].indexOf('(')); // 시간 부분\nvar oRegTime = dateValue + \" \" + timeValue;\n\n// 현재 시각\nvar currentTime = dateFormat(new Date());\n\n// 현재 시각 다음에 오는 코드번호 ex) 168\nvar iPresetNo = str.slice(str.indexOf('(') + 1, str.indexOf(')')).trim();\n\n// 동작 종류와 해당 값 ex) 양품, 결품검지, 테스트피스, ERR...\n// ex) 양품 > 2.49V, 전원 > ON, ERR > 위치검지1\nvar actionStr = str.slice(str.indexOf(')') + 1, str.length);\n\nvar actions = returnActionValue(actionStr);\nvar actionName = actions[0];\nvar actionValue = actions[1];\nvar etcValue = actions[2];\n\n// 모든 데이터를 담은 배열\n// var datas = [];\n// datas.push(oRegTime, currentTime, iPresetNo, str, actionName, actionValue, etcValue);\n// msg.payload = datas;\n\nvar datas = {\n    'oRegTime' : oRegTime,\n    'currentTime' : currentTime,\n    'iPresetNo' : iPresetNo,\n    'str' : str,\n    'actionName' : actionName,\n    'actionValue' : actionValue,\n    'etcValue' : etcValue\n}\nmsg.payload = datas;\n\n// mysql query\nvar db = 'mydb';\nvar table = 'isida_1';\n\nvar query = \" insert into \" + db + \".\"  + table +  \"(o_reg_time, curr_time, ipreset_no, str, action_name, action_value, etc_value) \";\nquery += \"values('\" + oRegTime + \"', '\" + currentTime + \"', '\" + iPresetNo + \"', '\" + str + \"', '\" + actionName + \"', '\" + actionValue + \"', '\" + etcValue + \"')\";\nmsg.topic = query;\nmsg.payload = actionName;\nreturn msg;\n\n\n\n\n// 현재 시각을 원하는 포맷의 문자열로 변경하는 함수\nfunction dateFormat(date) {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let hour = date.getHours();\n    let min = date.getMinutes();\n    let sec = date.getSeconds();\n\n    month = month.toString().padStart(2, '0');\n    day = day.toString().padStart(2, '0');\n    hour = hour.toString().padStart(2, '0');\n    min = min.toString().padStart(2, '0');\n    sec = sec.toString().padStart(2, '0');\n\n    return year + '-' + month + '-' + day + \" \" \n    + hour + \":\" + min + \":\" + sec;\n}\n\n// 동작 이름에 따른 추가 값 구분\nfunction returnActionValue(actionStr) {\n    var korStrList = ['양품', '결품', '금속', '테스트피스'];\n    var engStrList = ['OK', 'Lack', 'Detect', 'Test', 'Product'];\n    var gubun = false;\n\n    var actionName = \"none\";\n    var actionValue = \"none\";\n    var etcValue = \"none\";\n\n    // 해당 동작 이름이 포함되는지(한글)\n    for(var i=0; i<korStrList.length; i++) {\n        if(actionStr.includes(korStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 해당 동작 이름이 포함되는지(영문)\n    for(var i=0; i<engStrList.length; i++) {\n        if(actionStr.includes(engStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 동작 이름이 위의 리스트에 포함되면 V(전압) 값이 포함되므로 서로 다른 로직으로 처리한다.\n    if(gubun === false) {\n        var temp = actionStr.split(\" \");\n        actionName = temp.split(\" \").slice(0, -1).join(\"\"); // 동작 이름\n        actionValue = temp[temp.length - 1]; // 동작 값\n\n    } else {\n        var temp = actionStr;\n        if(temp.includes('(')) {\n            etcValue = temp.slice(temp.indexOf('('), temp.length);\n            temp = temp.slice(0, temp.indexOf('(') - 1);\n        }\n\n        temp = temp.split(\" \");\n        for(var i=0; i<temp.length; i++) {\n            if(temp[i].includes('V')) {\n                actionValue = temp[i];\n            }\n        }\n        // IND = eng, IND2 = kor\n        // * 영문일 경우 동작이름 부분에 공백이 포함되어 있음.\n        var lang = 'kor';\n        if(lang === 'kor') {\n            actionName = temp[0];\n        } else {\n            actionName = temp.slice(0, -1).join(\"\");\n        }\n    }\n    \n    return [actionName, actionValue, etcValue];\n\n}\n\n\n\n// ' * IND는 영어로옴 IND2는 한글로옴\n// ' * 한국어\n// ' 2020-11-02 11:19:04(168)양품 2.49V \n// ' 2020-11-02 11:53:42(168)결품검지 0.21V ( 1)\n// ' 2020-11-02 11:53:42(168)금속혼입 0.21V ( 1)\n// ' 2020-07-14 08:58:03( 1)금속혼입 99.83V ( 6)\n// ' 2020-11-02 11:55:38(168)테스트피스OK 99.99V\n// ' 2020-11-02 11:55:38(168)테스트피스NG 99.99V\n// ' 2020-11-02 11:55:38(168)결품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)결품동작NG 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작NG 0.41V \n// ' 2020-11-02 11:29:16(168)Conveyor ON \n// ' 2020-11-02 11:29:19(168)Conveyor OFF \n// ' 2020-11-02 11:25:47(168)전원 ON \n// ' 2020-11-02 11:25:47(168)전원 OFF \n// ' 2020-07-14 08:58:03( 1)품종변경 (11->1)\n// ' 2020-11-02 11:19:20(168)ERR 위치검지1 \n// ' 2020-11-02 11:35:15(168)ERR 송신전압초과 \n// ' 2020-11-02 11:21:52(168)ERR 배터리저하 \n// ' 2020-11-02 11:19:20(168)ERR해제 위치검지1\n\n\n\n\n// ' * 영문\n// ' 2022-01-21 09:48:41( 20)Power ON                 ' 전원 ON\n// ' 2022-01-21 09:48:41( 20)Power OFF                ' 전원 OFF\n// ' 2022-01-21 11:05:53( 19)Conveyor ON              ' Conveyor ON\n// ' 2022-01-21 11:05:53( 19)Conveyor OFF             ' Conveyor OFF\n// ' 2022-01-21 11:00:13( 19)Detect 98.76V ( 6)       ' 금속혼입\n// ' 2022-01-21 10:59:43( 19)OK 0.59V                 ' 양품\n// ' 2022-01-21 11:00:43( 19)Lack 1.09V ( 7)          ' 결품감지\n// ' 2022-01-21 11:01:05( 19) Lack Detect OK 1.43V    ' 결품동작OK\n// ' 2022-01-21 11:01:32( 19) Lack Detect NG 98.76V   ' 결품동작NG\n// ' 2022-01-21 11:02:11( 19) Test Piece NG 1.60V     ' 테스트피스NG\n// ' 2022-01-21 11:02:16( 19) Test Piece OK 98.76V    ' 테스트피스OK\n// ' 2022-01-21 11:12:49( 19) Product Pass OK 1.28V   ' 양품동작OK \n// ' 2022-01-21 11:12:53( 19) Product Pass NG 98.76V  ' 양품동작NG\n// ' 2022-01-21 11:01:32( 19)Err Balance Over         ' ERR\n// ' 2022-01-21 11:02:17( 19)Err Off Balance Over     ' ERR해제",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 200,
    "wires": [
      [
        "1cf0fec19c5fb02e",
        "2cc19a75a9562853"
      ]
    ]
  },
  {
    "id": "a2773e3354cae5dc",
    "type": "switch",
    "z": "3d5f5c20eed11be6",
    "name": "분기점",
    "property": "state",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "false",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "true",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 570,
    "y": 160,
    "wires": [
      [
        "d78f94a4d8f45255"
      ],
      [
        "12cae45c93f991fe"
      ]
    ]
  },
  {
    "id": "ef6aa3ac65afa779",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "실패 출력(이시다1)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 990,
    "y": 120,
    "wires": []
  },
  {
    "id": "d78f94a4d8f45255",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "에러메시지 변경",
    "func": "msg.payload = msg.topic;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 780,
    "y": 120,
    "wires": [
      [
        "ef6aa3ac65afa779"
      ]
    ]
  },
  {
    "id": "8596b054c2cc11fd",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "출력 버퍼 검사",
    "func": "var detectionData = msg.payload;\n\n\n// 버퍼의 길이가 40만 이상이면 종료\nif(detectionData.length > 400000) {\n    msg.state = \"false\";\n    msg.topic = \"Error: 버퍼의 길이가 400,000 이상입니다.\"\n}\n\n\n// 'LF'가 존재하는지 확인\nvar buffData = Buffer.from(detectionData);\nvar indexOfLf = buffData.indexOf(0x0A);\n\n// 'LF'가 존재한다면\nif(indexOfLf != -1) {\n    // CR, LF를 제외한 버퍼 데이터의 길이 만큼 buffData에 저장\n    buffData = buffData.subarray(0, indexOfLf - 1);\n\n    // 데이터의 길이가 24이하면 정상 데이터가 아니므로 에러 출력\n    if(buffData.length < 24) {\n        msg.state = \"false\";\n        msg.topic = \"Error, 데이터의 길이가 24보다 작습니다. (정상데이터가 아닙니다.)\";\n        return msg;\n    }\n    \n    msg.state = \"true\";\n    msg.payload = buffData; \n    \n} else {\n    msg.state = \"false\";\n    msg.topic = \"Error: LF(라인피드)가 버퍼에 존재하지 않습니다.\";\n}\n\nreturn msg;\n\n\n\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 360,
    "wires": [
      [
        "489baabe70717221"
      ]
    ]
  },
  {
    "id": "f52bd0493801a082",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "문자열 슬라이싱",
    "func": "// KSC5601 DECODE STRING\nvar str = msg.payload;\n\n// 검출기 반응 시각\nvar dateValue = str.split(\" \")[0]; // 날짜 부분\nvar timeValue = str.split(\" \")[1].slice(0, str.split(\" \")[1].indexOf('(')); // 시간 부분\nvar oRegTime = dateValue + \" \" + timeValue;\n\n// 현재 시각\nvar currentTime = dateFormat(new Date());\n\n// 현재 시각 다음에 오는 코드번호 ex) 168\nvar iPresetNo = str.slice(str.indexOf('(') + 1, str.indexOf(')')).trim();\n\n// 동작 종류와 해당 값 ex) 양품, 결품검지, 테스트피스, ERR...\n// ex) 양품 > 2.49V, 전원 > ON, ERR > 위치검지1\nvar actionStr = str.slice(str.indexOf(')') + 1, str.length);\n\nvar actions = returnActionValue(actionStr);\nvar actionName = actions[0];\nvar actionValue = actions[1];\nvar etcValue = actions[2];\n\n// 모든 데이터를 담은 배열\n// var datas = [];\n// datas.push(oRegTime, currentTime, iPresetNo, str, actionName, actionValue, etcValue);\n// msg.payload = datas;\n\nvar datas = {\n    'oRegTime' : oRegTime,\n    'currentTime' : currentTime,\n    'iPresetNo' : iPresetNo,\n    'str' : str,\n    'actionName' : actionName,\n    'actionValue' : actionValue,\n    'etcValue' : etcValue\n}\nmsg.payload = datas;\n\n// mysql query\nvar db = 'mydb';\nvar table = 'isida_2';\n\nvar query = \" insert into \" + db + \".\"  + table +  \"(o_reg_time, curr_time, ipreset_no, str, action_name, action_value, etc_value) \";\nquery += \"values('\" + oRegTime + \"', '\" + currentTime + \"', '\" + iPresetNo + \"', '\" + str + \"', '\" + actionName + \"', '\" + actionValue + \"', '\" + etcValue + \"')\";\nmsg.topic = query;\nmsg.payload = actionName;\nreturn msg;\n\n\n\n\n// 현재 시각을 원하는 포맷의 문자열로 변경하는 함수\nfunction dateFormat(date) {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let hour = date.getHours();\n    let min = date.getMinutes();\n    let sec = date.getSeconds();\n\n    month = month.toString().padStart(2, '0');\n    day = day.toString().padStart(2, '0');\n    hour = hour.toString().padStart(2, '0');\n    min = min.toString().padStart(2, '0');\n    sec = sec.toString().padStart(2, '0');\n\n    return year + '-' + month + '-' + day + \" \" \n    + hour + \":\" + min + \":\" + sec;\n}\n\n// 동작 이름에 따른 추가 값 구분\nfunction returnActionValue(actionStr) {\n    var korStrList = ['양품', '결품', '금속', '테스트피스'];\n    var engStrList = ['OK', 'Lack', 'Detect', 'Test', 'Product'];\n    var gubun = false;\n\n    var actionName = \"none\";\n    var actionValue = \"none\";\n    var etcValue = \"none\";\n\n    // 해당 동작 이름이 포함되는지(한글)\n    for(var i=0; i<korStrList.length; i++) {\n        if(actionStr.includes(korStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 해당 동작 이름이 포함되는지(영문)\n    for(var i=0; i<engStrList.length; i++) {\n        if(actionStr.includes(engStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 동작 이름이 위의 리스트에 포함되면 V(전압) 값이 포함되므로 서로 다른 로직으로 처리한다.\n    if(gubun === false) {\n        var temp = actionStr.split(\" \");\n        actionName = temp.split(\" \").slice(0, -1).join(\"\"); // 동작 이름\n        actionValue = temp[temp.length - 1]; // 동작 값\n\n    } else {\n        var temp = actionStr;\n        if(temp.includes('(')) {\n            etcValue = temp.slice(temp.indexOf('('), temp.length);\n            temp = temp.slice(0, temp.indexOf('(') - 1);\n        }\n\n        temp = temp.split(\" \");\n        for(var i=0; i<temp.length; i++) {\n            if(temp[i].includes('V')) {\n                actionValue = temp[i];\n            }\n        }\n        // IND = eng, IND2 = kor\n        // * 영문일 경우 동작이름 부분에 공백이 포함되어 있음.\n        var lang = 'kor';\n        if(lang === 'kor') {\n            actionName = temp[0];\n        } else {\n            actionName = temp.slice(0, -1).join(\"\");\n        }\n    }\n    \n    return [actionName, actionValue, etcValue];\n\n}\n\n\n\n// ' * IND는 영어로옴 IND2는 한글로옴\n\n// ' * 한국어\n// ' 2020-11-02 11:19:04(168)양품 2.49V \n// ' 2020-11-02 11:53:42(168)결품검지 0.21V ( 1)\n// ' 2020-11-02 11:53:42(168)금속혼입 0.21V ( 1)\n// ' 2020-07-14 08:58:03( 1)금속혼입 99.83V ( 6)\n// ' 2020-11-02 11:55:38(168)테스트피스OK 99.99V\n// ' 2020-11-02 11:55:38(168)테스트피스NG 99.99V\n// ' 2020-11-02 11:55:38(168)결품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)결품동작NG 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작NG 0.41V \n// ' 2020-11-02 11:29:16(168)Conveyor ON \n// ' 2020-11-02 11:29:19(168)Conveyor OFF \n// ' 2020-11-02 11:25:47(168)전원 ON \n// ' 2020-11-02 11:25:47(168)전원 OFF \n// ' 2020-07-14 08:58:03( 1)품종변경 (11->1)\n// ' 2020-11-02 11:19:20(168)ERR 위치검지1 \n// ' 2020-11-02 11:35:15(168)ERR 송신전압초과 \n// ' 2020-11-02 11:21:52(168)ERR 배터리저하 \n// ' 2020-11-02 11:19:20(168)ERR해제 위치검지1\n\n\n\n\n// ' * 영문\n// ' 2022-01-21 09:48:41( 20)Power ON                 ' 전원 ON\n// ' 2022-01-21 09:48:41( 20)Power OFF                ' 전원 OFF\n// ' 2022-01-21 11:05:53( 19)Conveyor ON              ' Conveyor ON\n// ' 2022-01-21 11:05:53( 19)Conveyor OFF             ' Conveyor OFF\n// ' 2022-01-21 11:00:13( 19)Detect 98.76V ( 6)       ' 금속혼입\n// ' 2022-01-21 10:59:43( 19)OK 0.59V                 ' 양품\n// ' 2022-01-21 11:00:43( 19)Lack 1.09V ( 7)          ' 결품감지\n// ' 2022-01-21 11:01:05( 19) Lack Detect OK 1.43V    ' 결품동작OK\n// ' 2022-01-21 11:01:32( 19) Lack Detect NG 98.76V   ' 결품동작NG\n// ' 2022-01-21 11:02:11( 19) Test Piece NG 1.60V     ' 테스트피스NG\n// ' 2022-01-21 11:02:16( 19) Test Piece OK 98.76V    ' 테스트피스OK\n// ' 2022-01-21 11:12:49( 19) Product Pass OK 1.28V   ' 양품동작OK \n// ' 2022-01-21 11:12:53( 19) Product Pass NG 98.76V  ' 양품동작NG\n// ' 2022-01-21 11:01:32( 19)Err Balance Over         ' ERR\n// ' 2022-01-21 11:02:17( 19)Err Off Balance Over     ' ERR해제",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 400,
    "wires": [
      [
        "ab3bcb8f249cd72b",
        "65855107a95b4c65"
      ]
    ]
  },
  {
    "id": "489baabe70717221",
    "type": "switch",
    "z": "3d5f5c20eed11be6",
    "name": "분기점",
    "property": "state",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "false",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "true",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 570,
    "y": 360,
    "wires": [
      [
        "2deabd7db251bb83"
      ],
      [
        "41836b6e9a18cee7"
      ]
    ]
  },
  {
    "id": "dd956896615ffc37",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "실패 출력(이시다2)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 990,
    "y": 320,
    "wires": []
  },
  {
    "id": "2deabd7db251bb83",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "에러메시지 변경",
    "func": "msg.payload = msg.topic;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 780,
    "y": 320,
    "wires": [
      [
        "dd956896615ffc37"
      ]
    ]
  },
  {
    "id": "ceeec54318e4b844",
    "type": "tcp in",
    "z": "3d5f5c20eed11be6",
    "name": "이시다3",
    "server": "server",
    "host": "192.168.222.208",
    "port": "5003",
    "datamode": "stream",
    "datatype": "buffer",
    "newline": "",
    "topic": "",
    "trim": false,
    "base64": false,
    "tls": "",
    "x": 70,
    "y": 560,
    "wires": [
      [
        "582db71520587a3c"
      ]
    ]
  },
  {
    "id": "582db71520587a3c",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "출력 버퍼 검사",
    "func": "var detectionData = msg.payload;\n\n\n// 버퍼의 길이가 40만 이상이면 종료\nif (detectionData.length > 400000) {\n    msg.state = \"false\";\n    msg.topic = \"Error: 버퍼의 길이가 400,000 이상입니다.\"\n}\n\n\n// 'LF'가 존재하는지 확인\nvar buffData = Buffer.from(detectionData);\nvar indexOfLf = buffData.indexOf(0x0A);\n\n// 'LF'가 존재한다면\nif (indexOfLf != -1) {\n    // CR, LF를 제외한 버퍼 데이터의 길이 만큼 buffData에 저장\n    buffData = buffData.subarray(0, indexOfLf - 1);\n\n    // 데이터의 길이가 24이하면 정상 데이터가 아니므로 에러 출력\n    if (buffData.length < 24) {\n        msg.state = \"false\";\n        msg.topic = \"Error, 데이터의 길이가 24보다 작습니다. (정상데이터가 아닙니다.)\";\n        return msg;\n    }\n\n    msg.state = \"true\";\n    msg.payload = buffData;\n\n} else {\n    msg.state = \"false\";\n    msg.topic = \"Error: LF(라인피드)가 버퍼에 존재하지 않습니다.\";\n}\n\nreturn msg;\n\n\n\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 560,
    "wires": [
      [
        "f19cedb6bb5f6c69"
      ]
    ]
  },
  {
    "id": "e5f9e84f1b684b80",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "문자열 슬라이싱",
    "func": "// KSC5601 DECODE STRING\nvar str = msg.payload;\n\n// 검출기 반응 시각\nvar dateValue = str.split(\" \")[0]; // 날짜 부분\nvar timeValue = str.split(\" \")[1].slice(0, str.split(\" \")[1].indexOf('(')); // 시간 부분\nvar oRegTime = dateValue + \" \" + timeValue;\n\n// 현재 시각\nvar currentTime = dateFormat(new Date());\n\n// 현재 시각 다음에 오는 코드번호 ex) 168\nvar iPresetNo = str.slice(str.indexOf('(') + 1, str.indexOf(')')).trim();\n\n// 동작 종류와 해당 값 ex) 양품, 결품검지, 테스트피스, ERR...\n// ex) 양품 > 2.49V, 전원 > ON, ERR > 위치검지1\nvar actionStr = str.slice(str.indexOf(')') + 1, str.length);\n\nvar actions = returnActionValue(actionStr);\nvar actionName = actions[0];\nvar actionValue = actions[1];\nvar etcValue = actions[2];\n\n// 모든 데이터를 담은 배열\n// var datas = [];\n// datas.push(oRegTime, currentTime, iPresetNo, str, actionName, actionValue, etcValue);\n// msg.payload = datas;\n\nvar datas = {\n    'oRegTime' : oRegTime,\n    'currentTime' : currentTime,\n    'iPresetNo' : iPresetNo,\n    'str' : str,\n    'actionName' : actionName,\n    'actionValue' : actionValue,\n    'etcValue' : etcValue\n}\nmsg.payload = datas;\n\n// mysql query\nvar db = 'mydb';\nvar table = 'isida_3';\n\nvar query = \" insert into \" + db + \".\"  + table +  \"(o_reg_time, curr_time, ipreset_no, str, action_name, action_value, etc_value) \";\nquery += \"values('\" + oRegTime + \"', '\" + currentTime + \"', '\" + iPresetNo + \"', '\" + str + \"', '\" + actionName + \"', '\" + actionValue + \"', '\" + etcValue + \"')\";\nmsg.topic = query;\nmsg.payload = actionName;\nreturn msg;\n\n\n\n\n// 현재 시각을 원하는 포맷의 문자열로 변경하는 함수\nfunction dateFormat(date) {\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let hour = date.getHours();\n    let min = date.getMinutes();\n    let sec = date.getSeconds();\n\n    month = month.toString().padStart(2, '0');\n    day = day.toString().padStart(2, '0');\n    hour = hour.toString().padStart(2, '0');\n    min = min.toString().padStart(2, '0');\n    sec = sec.toString().padStart(2, '0');\n\n    return year + '-' + month + '-' + day + \" \" \n    + hour + \":\" + min + \":\" + sec;\n}\n\n// 동작 이름에 따른 추가 값 구분\nfunction returnActionValue(actionStr) {\n    var korStrList = ['양품', '결품', '금속', '테스트피스'];\n    var engStrList = ['OK', 'Lack', 'Detect', 'Test', 'Product'];\n    var gubun = false;\n\n    var actionName = \"none\";\n    var actionValue = \"none\";\n    var etcValue = \"none\";\n\n    // 해당 동작 이름이 포함되는지(한글)\n    for(var i=0; i<korStrList.length; i++) {\n        if(actionStr.includes(korStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 해당 동작 이름이 포함되는지(영문)\n    for(var i=0; i<engStrList.length; i++) {\n        if(actionStr.includes(engStrList[i])) {\n            gubun = true;\n            break;\n        }\n    }\n    // 동작 이름이 위의 리스트에 포함되면 V(전압) 값이 포함되므로 서로 다른 로직으로 처리한다.\n    if(gubun === false) {\n        var temp = actionStr.split(\" \");\n        actionName = temp.split(\" \").slice(0, -1).join(\"\"); // 동작 이름\n        actionValue = temp[temp.length - 1]; // 동작 값\n\n    } else {\n        var temp = actionStr;\n        if(temp.includes('(')) {\n            etcValue = temp.slice(temp.indexOf('('), temp.length);\n            temp = temp.slice(0, temp.indexOf('(') - 1);\n        }\n\n        temp = temp.split(\" \");\n        for(var i=0; i<temp.length; i++) {\n            if(temp[i].includes('V')) {\n                actionValue = temp[i];\n            }\n        }\n        // IND = eng, IND2 = kor\n        // * 영문일 경우 동작이름 부분에 공백이 포함되어 있음.\n        var lang = 'kor';\n        if(lang === 'kor') {\n            actionName = temp[0];\n        } else {\n            actionName = temp.slice(0, -1).join(\"\");\n        }\n    }\n    \n    return [actionName, actionValue, etcValue];\n\n}\n\n\n\n// ' * IND는 영어로옴 IND2는 한글로옴\n\n// ' * 한국어\n// ' 2020-11-02 11:19:04(168)양품 2.49V \n// ' 2020-11-02 11:53:42(168)결품검지 0.21V ( 1)\n// ' 2020-11-02 11:53:42(168)금속혼입 0.21V ( 1)\n// ' 2020-07-14 08:58:03( 1)금속혼입 99.83V ( 6)\n// ' 2020-11-02 11:55:38(168)테스트피스OK 99.99V\n// ' 2020-11-02 11:55:38(168)테스트피스NG 99.99V\n// ' 2020-11-02 11:55:38(168)결품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)결품동작NG 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작OK 0.41V \n// ' 2020-11-02 11:55:38(168)양품동작NG 0.41V \n// ' 2020-11-02 11:29:16(168)Conveyor ON \n// ' 2020-11-02 11:29:19(168)Conveyor OFF \n// ' 2020-11-02 11:25:47(168)전원 ON \n// ' 2020-11-02 11:25:47(168)전원 OFF \n// ' 2020-07-14 08:58:03( 1)품종변경 (11->1)\n// ' 2020-11-02 11:19:20(168)ERR 위치검지1 \n// ' 2020-11-02 11:35:15(168)ERR 송신전압초과 \n// ' 2020-11-02 11:21:52(168)ERR 배터리저하 \n// ' 2020-11-02 11:19:20(168)ERR해제 위치검지1\n\n\n\n\n// ' * 영문\n// ' 2022-01-21 09:48:41( 20)Power ON                 ' 전원 ON\n// ' 2022-01-21 09:48:41( 20)Power OFF                ' 전원 OFF\n// ' 2022-01-21 11:05:53( 19)Conveyor ON              ' Conveyor ON\n// ' 2022-01-21 11:05:53( 19)Conveyor OFF             ' Conveyor OFF\n// ' 2022-01-21 11:00:13( 19)Detect 98.76V ( 6)       ' 금속혼입\n// ' 2022-01-21 10:59:43( 19)OK 0.59V                 ' 양품\n// ' 2022-01-21 11:00:43( 19)Lack 1.09V ( 7)          ' 결품감지\n// ' 2022-01-21 11:01:05( 19) Lack Detect OK 1.43V    ' 결품동작OK\n// ' 2022-01-21 11:01:32( 19) Lack Detect NG 98.76V   ' 결품동작NG\n// ' 2022-01-21 11:02:11( 19) Test Piece NG 1.60V     ' 테스트피스NG\n// ' 2022-01-21 11:02:16( 19) Test Piece OK 98.76V    ' 테스트피스OK\n// ' 2022-01-21 11:12:49( 19) Product Pass OK 1.28V   ' 양품동작OK \n// ' 2022-01-21 11:12:53( 19) Product Pass NG 98.76V  ' 양품동작NG\n// ' 2022-01-21 11:01:32( 19)Err Balance Over         ' ERR\n// ' 2022-01-21 11:02:17( 19)Err Off Balance Over     ' ERR해제",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 600,
    "wires": [
      [
        "43aaa2ab787134aa",
        "8218ccfb559ca0dc"
      ]
    ]
  },
  {
    "id": "f19cedb6bb5f6c69",
    "type": "switch",
    "z": "3d5f5c20eed11be6",
    "name": "분기점",
    "property": "state",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "false",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "true",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 570,
    "y": 560,
    "wires": [
      [
        "45ddec4c0ce75535"
      ],
      [
        "0c6fcd955b1ccdb7"
      ]
    ]
  },
  {
    "id": "393293f5e2f48cd0",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "실패 출력(이시다3)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 990,
    "y": 520,
    "wires": []
  },
  {
    "id": "45ddec4c0ce75535",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "에러메시지 변경",
    "func": "msg.payload = msg.topic;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 780,
    "y": 520,
    "wires": [
      [
        "393293f5e2f48cd0"
      ]
    ]
  },
  {
    "id": "0900168017164893",
    "type": "tcp in",
    "z": "3d5f5c20eed11be6",
    "name": "나우1",
    "server": "server",
    "host": "192.168.222.210",
    "port": "5004",
    "datamode": "stream",
    "datatype": "buffer",
    "newline": "",
    "topic": "",
    "trim": false,
    "base64": false,
    "tls": "",
    "x": 150,
    "y": 860,
    "wires": [
      [
        "265eb78e6c74ed62"
      ]
    ]
  },
  {
    "id": "83a414ed9cfac92b",
    "type": "tcp in",
    "z": "3d5f5c20eed11be6",
    "name": "나우2",
    "server": "server",
    "host": "192.168.0.210",
    "port": "5005",
    "datamode": "stream",
    "datatype": "buffer",
    "newline": "",
    "topic": "",
    "trim": false,
    "base64": false,
    "tls": "",
    "x": 150,
    "y": 1020,
    "wires": [
      [
        "b9aac0731c265f01"
      ]
    ]
  },
  {
    "id": "265eb78e6c74ed62",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "버퍼",
    "func": "/**\n * 데이터의 앞 부분에 오는 두 개의 문자(ASCII)를 더 했을 때 \n * 정상 데이터 80, 81 여부 확인 (머신 설정에 나와있음)\n * \n * \n * 코드 정의\n * 80: 금속검출\n * 81: 결품검출\n * 82: 전원ON\n * 83: 전원OFF\n * \n * 해당 코드에 맞는 분기 작성하기.\n * \n * \n * NMD530 금속검출기 모델은 ASCII 인코딩을 사용함\n */\n\n/**\n * 데이터 검증 흐름\n * \n * 1~2 코드가 82, 83일 경우 해당 로그를 노드레드에 출력하고 종료\n * \n * 80, 81일 경우 해당 데이터를 파싱\n * \n * 버퍼에서 CR, LF을 제거\n * \n * 23길이(NG 횟수의 마지막)이후 데이터를 모두 TOTAL 값으로 파싱\n */\n\n\n\n// 금속검출\n// 0x20, 0x38, 0x30, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A\n// var detectionData = [0x20, 0x38, 0x30, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A];\n\n// 전원 OFF\n// 0x20, 0x38, 0x33, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x31, 0x3A, 0x35, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A\n// var detectionData = [0x20, 0x38, 0x33, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x31, 0x3A, 0x35, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A];\n\n\n\nmsg.payload = Buffer.from(msg.payload);\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 860,
    "wires": [
      [
        "f36ccde6e53bae46"
      ]
    ]
  },
  {
    "id": "219308b3a44e3d69",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "문자열 파싱",
    "func": "var data = msg.payload;\nvar dataArray = data.split('');\n\nvar len = dataArray.length;\nvar detect = false;\n\n// 정상 데이터로 인식되지 않으므로 종료.\nif (len < 10) {\n    return;\n}\n\n// 검출코드\nremoveFrontGap(dataArray);\nvar detectCode = returnDataToSearchChar(dataArray, ' ');\n\n/* \n    검출코드가 구분되지 않으면 종료\n    [코드 정의]\n     80: 금속검출\n     81: 결품검출\n     82: 전원ON\n     83: 전원OFF\n*/\nif (!returnBetweenNumber(parseInt(detectCode), 80, 83)) {\n    return;\n}\n\n\n/* 필요 없는 데이터를 건너뛰기 */\nremoveFrontGap(dataArray);\nreturnDataToSearchChar(dataArray, ' ');\n\n// 검출 시간\nremoveFrontGap(dataArray);\nvar localTime = returnDataToSearchChar(dataArray, ' ');\n\n// NG 개수\nremoveFrontGap(dataArray);\nvar ngCount = returnDataToSearchChar(dataArray, ' ');\n\n\n// 총 생산 개수\nremoveFrontGap(dataArray);\nvar total = returnStringRemoveCRLF(dataArray.join(''));\n\nmsg.payload = {\n    'detectCode' : detectCode,\n    'localTime' : localTime,\n    'ngCount' : ngCount,\n    'total' : total\n};\n\n// mysql query\nvar db = 'mydb';\nvar table = 'now_1';\n\nvar query = \" insert into \" + db + \".\" + table + \"(detect_code, local_time, ng_count, total) \";\nquery += \"values('\" + detectCode + \"', '\" + localTime + \"', '\" + ngCount + \"', '\" + total + \"')\";\n\nmsg.topic = query;\nreturn msg;\n\n\n\n\n\n\n/* 배열에서 앞 부분의 공백을 제거하는 함수 */\nfunction removeFrontGap(buffs) {\n    var lastGapIndex = -1;\n    for (let i = 0; i < buffs.length; i++) {\n        if (buffs[i] == ' ') {\n            lastGapIndex++;\n            continue;\n        } else {\n            break;\n        }\n    }\n    console.log(lastGapIndex);\n    if (lastGapIndex != -1) {\n        buffs = buffs.splice(0, lastGapIndex + 1);\n    }\n}\n\n/* 버퍼의 앞 부분부터 검색할 문자의 인덱스 위치까지를 반환하는 함수 */\nfunction returnDataToSearchChar(buffs, ch) {\n    var searchIndex = buffs.indexOf(ch);\n    var returnData = \"\";\n\n    if (searchIndex == -1) {\n        return;\n    }\n\n    returnData = (buffs.slice(0, searchIndex)).join('');\n    buffs = buffs.splice(0, searchIndex); // 실제 배열을 수정함.\n\n    return returnData;\n}\n\n/* 숫자가 사이에 위치하는지를 반환하는 함수 */\nfunction returnBetweenNumber(number, min, max) {\n    return number >= min && number <= max;\n}\n\n/* \\r, \\n 문자가 있을 경우 제거한 문자열을 반환하는 함수 */\nfunction returnStringRemoveCRLF(string) {\n    var temp = '';\n    temp = string.split('\\r').join('');\n    temp = string.split('\\n').join('');\n    return temp;\n}",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 860,
    "wires": [
      [
        "dbacd60d8f66a253",
        "f3c4b637e2e1a47f"
      ]
    ]
  },
  {
    "id": "b9aac0731c265f01",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "버퍼",
    "func": "/**\n * 데이터의 앞 부분에 오는 두 개의 문자(ASCII)를 더 했을 때 \n * 정상 데이터 80, 81 여부 확인 (머신 설정에 나와있음)\n * \n * \n * 코드 정의\n * 80: 금속검출\n * 81: 결품검출\n * 82: 전원ON\n * 83: 전원OFF\n * \n * 해당 코드에 맞는 분기 작성하기.\n * \n * \n * NMD530 금속검출기 모델은 ASCII 인코딩을 사용함\n */\n\n/**\n * 데이터 검증 흐름\n * \n * 1~2 코드가 82, 83일 경우 해당 로그를 노드레드에 출력하고 종료\n * \n * 80, 81일 경우 해당 데이터를 파싱\n * \n * 버퍼에서 CR, LF을 제거\n * \n * 23길이(NG 횟수의 마지막)이후 데이터를 모두 TOTAL 값으로 파싱\n */\n\n\n\n// 금속검출\n// 0x20, 0x38, 0x30, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A\n// var detectionData = [0x20, 0x38, 0x30, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A];\n\n// 전원 OFF\n// 0x20, 0x38, 0x33, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x31, 0x3A, 0x35, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A\n// var detectionData = [0x20, 0x38, 0x33, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x31, 0x3A, 0x35, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A];\n\n\n\nmsg.payload = Buffer.from(msg.payload);\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 1020,
    "wires": [
      [
        "c41cc425f4c60c3d"
      ]
    ]
  },
  {
    "id": "e7c865711077a82b",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "문자열 파싱",
    "func": "var data = msg.payload;\nvar dataArray = data.split('');\n\nvar len = dataArray.length;\nvar detect = false;\n\n// 정상 데이터로 인식되지 않으므로 종료.\nif (len < 10) {\n    return;\n}\n\n// 검출코드\nremoveFrontGap(dataArray);\nvar detectCode = returnDataToSearchChar(dataArray, ' ');\n\n/* \n    검출코드가 구분되지 않으면 종료\n    [코드 정의]\n     80: 금속검출\n     81: 결품검출\n     82: 전원ON\n     83: 전원OFF\n*/\nif (!returnBetweenNumber(parseInt(detectCode), 80, 83)) {\n    return;\n}\n\n\n/* 필요 없는 데이터를 건너뛰기 */\nremoveFrontGap(dataArray);\nreturnDataToSearchChar(dataArray, ' ');\n\n// 검출 시간\nremoveFrontGap(dataArray);\nvar localTime = returnDataToSearchChar(dataArray, ' ');\n\n// NG 개수\nremoveFrontGap(dataArray);\nvar ngCount = returnDataToSearchChar(dataArray, ' ');\n\n\n// 총 생산 개수\nremoveFrontGap(dataArray);\nvar total = returnStringRemoveCRLF(dataArray.join(''));\n\nmsg.payload = {\n    'detectCode' : detectCode,\n    'localTime' : localTime,\n    'ngCount' : ngCount,\n    'total' : total\n};\n\n// mysql query\nvar db = 'mydb';\nvar table = 'now_2';\n\nvar query = \" insert into \" + db + \".\" + table + \"(detect_code, local_time, ng_count, total) \";\nquery += \"values('\" + detectCode + \"', '\" + localTime + \"', '\" + ngCount + \"', '\" + total + \"')\";\n\nmsg.topic = query;\nreturn msg;\n\n\n\n\n\n\n/* 배열에서 앞 부분의 공백을 제거하는 함수 */\nfunction removeFrontGap(buffs) {\n    var lastGapIndex = -1;\n    for (let i = 0; i < buffs.length; i++) {\n        if (buffs[i] == ' ') {\n            lastGapIndex++;\n            continue;\n        } else {\n            break;\n        }\n    }\n    console.log(lastGapIndex);\n    if (lastGapIndex != -1) {\n        buffs = buffs.splice(0, lastGapIndex + 1);\n    }\n}\n\n/* 버퍼의 앞 부분부터 검색할 문자의 인덱스 위치까지를 반환하는 함수 */\nfunction returnDataToSearchChar(buffs, ch) {\n    var searchIndex = buffs.indexOf(ch);\n    var returnData = \"\";\n\n    if (searchIndex == -1) {\n        return;\n    }\n\n    returnData = (buffs.slice(0, searchIndex)).join('');\n    buffs = buffs.splice(0, searchIndex); // 실제 배열을 수정함.\n\n    return returnData;\n}\n\n/* 숫자가 사이에 위치하는지를 반환하는 함수 */\nfunction returnBetweenNumber(number, min, max) {\n    return number >= min && number <= max;\n}\n\n/* \\r, \\n 문자가 있을 경우 제거한 문자열을 반환하는 함수 */\nfunction returnStringRemoveCRLF(string) {\n    var temp = '';\n    temp = string.split('\\r').join('');\n    temp = string.split('\\n').join('');\n    return temp;\n}",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 1020,
    "wires": [
      [
        "479cf32e45ab4eb7",
        "d610b3e0d84eafd1"
      ]
    ]
  },
  {
    "id": "66bb77b7d87331e2",
    "type": "comment",
    "z": "3d5f5c20eed11be6",
    "name": "이시다 금속검출기 3대",
    "info": "",
    "x": 120,
    "y": 100,
    "wires": []
  },
  {
    "id": "c022c60f2241ae56",
    "type": "comment",
    "z": "3d5f5c20eed11be6",
    "name": "나우 금속검출기 2대",
    "info": "",
    "x": 190,
    "y": 760,
    "wires": []
  },
  {
    "id": "8e39ca00290092bf",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "데이터베이스(이시다1)",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1540,
    "y": 260,
    "wires": []
  },
  {
    "id": "e25ce3778313d9c2",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "데이터베이스(이시다2)",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1540,
    "y": 460,
    "wires": []
  },
  {
    "id": "c6225d13d8cef05e",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "데이터베이스(이시다3)",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1540,
    "y": 660,
    "wires": []
  },
  {
    "id": "3af9acbcb9a4e6ad",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "데이터베이스(나우1)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1180,
    "y": 860,
    "wires": []
  },
  {
    "id": "aa5e3892f15a3db8",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "데이터베이스(나우2)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1160,
    "y": 1020,
    "wires": []
  },
  {
    "id": "0d3bace796a3d891",
    "type": "tcp in",
    "z": "3d5f5c20eed11be6",
    "name": "이시다2",
    "server": "server",
    "host": "",
    "port": "5002",
    "datamode": "stream",
    "datatype": "buffer",
    "newline": "",
    "topic": "",
    "trim": false,
    "base64": false,
    "tls": "",
    "x": 70,
    "y": 360,
    "wires": [
      [
        "8596b054c2cc11fd"
      ]
    ]
  },
  {
    "id": "895229903253704a",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "debug 1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 640,
    "y": 260,
    "wires": []
  },
  {
    "id": "fe1624a168941e2c",
    "type": "inject",
    "z": "3d5f5c20eed11be6",
    "name": "DAY 7",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "00 01 * * 0",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "x": 160,
    "y": 1120,
    "wires": [
      [
        "907f10128895f3d1"
      ]
    ]
  },
  {
    "id": "907f10128895f3d1",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "테이블 내용 삭제",
    "func": "\nmsg.topic = 'TRUNCATE TABLE mydb.isida_1';\nnode.send(msg);\n\nmsg.topic = 'TRUNCATE TABLE mydb.isida_2';\nnode.send(msg);\n\nmsg.topic = 'TRUNCATE TABLE mydb.isida_3';\nnode.send(msg);\n\nmsg.topic = 'TRUNCATE TABLE mydb.now_1';\nnode.send(msg);\n\nmsg.topic = 'TRUNCATE TABLE mydb.now_2';\nnode.send(msg);\n\n\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 1120,
    "wires": [
      [
        "e8bbc571ebc289a3"
      ]
    ]
  },
  {
    "id": "2cc19a75a9562853",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 1350,
    "y": 260,
    "wires": [
      [
        "8e39ca00290092bf"
      ]
    ]
  },
  {
    "id": "65855107a95b4c65",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 1350,
    "y": 460,
    "wires": [
      [
        "e25ce3778313d9c2"
      ]
    ]
  },
  {
    "id": "8218ccfb559ca0dc",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 1350,
    "y": 660,
    "wires": [
      [
        "c6225d13d8cef05e"
      ]
    ]
  },
  {
    "id": "f3c4b637e2e1a47f",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 950,
    "y": 860,
    "wires": [
      [
        "3af9acbcb9a4e6ad"
      ]
    ]
  },
  {
    "id": "d610b3e0d84eafd1",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 950,
    "y": 1020,
    "wires": [
      [
        "aa5e3892f15a3db8"
      ]
    ]
  },
  {
    "id": "e8bbc571ebc289a3",
    "type": "mysql",
    "z": "3d5f5c20eed11be6",
    "mydb": "d0ae13d976d2815f",
    "name": "mysql",
    "x": 530,
    "y": 1120,
    "wires": [
      []
    ]
  },
  {
    "id": "12cae45c93f991fe",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ksc5601)",
    "from": "ksc5601",
    "x": 830,
    "y": 200,
    "wires": [
      [
        "900da682280a0ae0"
      ]
    ]
  },
  {
    "id": "41836b6e9a18cee7",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ksc5601)",
    "from": "ksc5601",
    "x": 830,
    "y": 400,
    "wires": [
      [
        "f52bd0493801a082"
      ]
    ]
  },
  {
    "id": "0c6fcd955b1ccdb7",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ksc5601)",
    "from": "ksc5601",
    "x": 830,
    "y": 600,
    "wires": [
      [
        "e5f9e84f1b684b80"
      ]
    ]
  },
  {
    "id": "f36ccde6e53bae46",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ascii)",
    "from": "ascii",
    "x": 540,
    "y": 860,
    "wires": [
      [
        "219308b3a44e3d69"
      ]
    ]
  },
  {
    "id": "c41cc425f4c60c3d",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ascii)",
    "from": "ascii",
    "x": 540,
    "y": 1020,
    "wires": [
      [
        "e7c865711077a82b"
      ]
    ]
  },
  {
    "id": "786ee3000e9c1dc8",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "데이터 복호화(decode, ksc5601)",
    "from": "ksc5601",
    "x": 370,
    "y": 260,
    "wires": [
      [
        "895229903253704a"
      ]
    ]
  },
  {
    "id": "1cf0fec19c5fb02e",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "SEND API",
    "func": "// 이시다 금속검출기 1번\nvar ccode = '0065';\nvar scode = '92';\nvar detected = 0;\n\nvar actionName = msg.payload;\nvar lowerActionName = actionName.toLowerCase();\nvar detectNameList = ['결품검지', '금속혼입', '테스트피스', '결품동작', '양품동작',\n    'detect', 'lack', 'testpiece', 'productpass'];\n\ndetected = detectNameList.filter(detectName => lowerActionName.includes(detectName.toLowerCase()));\n\nif(detected.length > 0) {\n    msg.headers = {};\n    msg.headers['content-type'] = 'application/json';\n    msg.headers['Accept'] = 'application/json';\n\n    msg.payload = {\n        'ccode': ccode,\n        'scode': scode\n    };\n\n    return msg;\n}\n\nreturn;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 320,
    "wires": [
      [
        "2ef9d2f310c505a1"
      ]
    ]
  },
  {
    "id": "2ef9d2f310c505a1",
    "type": "http request",
    "z": "3d5f5c20eed11be6",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://pc.smarthaccpman.com/smh-api/c0065/get_detection",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1570,
    "y": 320,
    "wires": [
      [
        "6f29ee6029b10ed6"
      ]
    ]
  },
  {
    "id": "6f29ee6029b10ed6",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "http debug isida_1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1770,
    "y": 320,
    "wires": []
  },
  {
    "id": "ab3bcb8f249cd72b",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "SEND API",
    "func": "// 이시다 금속검출기 2번\nvar ccode = '0065';\nvar scode = '93';\nvar detected = 0;\n\nvar actionName = msg.payload;\nvar lowerActionName = actionName.toLowerCase();\nvar detectNameList = ['결품검지', '금속혼입', '테스트피스', '결품동작', '양품동작',\n    'detect', 'lack', 'testpiece', 'productpass'];\n\ndetected = detectNameList.filter(detectName => lowerActionName.includes(detectName.toLowerCase()));\n\nif(detected.length > 0) {\n    msg.headers = {};\n    msg.headers['content-type'] = 'application/json';\n    msg.headers['Accept'] = 'application/json';\n\n    msg.payload = {\n        'ccode': ccode,\n        'scode': scode\n    };\n\n    return msg;\n}\n\nreturn;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 540,
    "wires": [
      [
        "e3387e4d0b30087e"
      ]
    ]
  },
  {
    "id": "e3387e4d0b30087e",
    "type": "http request",
    "z": "3d5f5c20eed11be6",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://pc.smarthaccpman.com/smh-api/c0065/get_detection",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1570,
    "y": 540,
    "wires": [
      [
        "e84ad22b7d0d33d7"
      ]
    ]
  },
  {
    "id": "e84ad22b7d0d33d7",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "http debug isida_2",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1770,
    "y": 540,
    "wires": []
  },
  {
    "id": "43aaa2ab787134aa",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "SEND API",
    "func": "// 이시다 금속검출기 3번\nvar ccode = '0065';\nvar scode = '94';\nvar detected = 0;\n\nvar actionName = msg.payload;\nvar lowerActionName = actionName.toLowerCase();\nvar detectNameList = ['결품검지', '금속혼입', '테스트피스', '결품동작', '양품동작',\n    'detect', 'lack', 'testpiece', 'productpass'];\n\ndetected = detectNameList.filter(detectName => lowerActionName.includes(detectName.toLowerCase()));\n\nif(detected.length > 0) {\n    msg.headers = {};\n    msg.headers['content-type'] = 'application/json';\n    msg.headers['Accept'] = 'application/json';\n\n    msg.payload = {\n        'ccode': ccode,\n        'scode': scode\n    };\n\n    return msg;\n}\n\nreturn;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 740,
    "wires": [
      [
        "b43d10e5db96cbaa"
      ]
    ]
  },
  {
    "id": "b43d10e5db96cbaa",
    "type": "http request",
    "z": "3d5f5c20eed11be6",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://pc.smarthaccpman.com/smh-api/c0065/get_detection",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1570,
    "y": 740,
    "wires": [
      [
        "442790fe3dea2fad"
      ]
    ]
  },
  {
    "id": "442790fe3dea2fad",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "http debug isida_3",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1770,
    "y": 740,
    "wires": []
  },
  {
    "id": "dbacd60d8f66a253",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "SEND API",
    "func": "// 나우 금속검출기 1번\nvar ccode = '0065';\nvar scode = '95';\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Accept'] = 'application/json';\n\nmsg.payload = {\n    'ccode' : ccode,\n    'scode' : scode\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 970,
    "y": 920,
    "wires": [
      [
        "65e6cbd947d17c55"
      ]
    ]
  },
  {
    "id": "65e6cbd947d17c55",
    "type": "http request",
    "z": "3d5f5c20eed11be6",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://pc.smarthaccpman.com/smh-api/c0065/get_detection",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1150,
    "y": 920,
    "wires": [
      [
        "a0bb4d861abff4a7"
      ]
    ]
  },
  {
    "id": "a0bb4d861abff4a7",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "http debug now_1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1370,
    "y": 920,
    "wires": []
  },
  {
    "id": "479cf32e45ab4eb7",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "SEND API",
    "func": "// 나우 금속검출기 2번\nvar ccode = '0065';\nvar scode = '96';\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Accept'] = 'application/json';\n\nmsg.payload = {\n    'ccode' : ccode,\n    'scode' : scode\n};\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 970,
    "y": 1080,
    "wires": [
      [
        "94965ddf2df62471"
      ]
    ]
  },
  {
    "id": "94965ddf2df62471",
    "type": "http request",
    "z": "3d5f5c20eed11be6",
    "name": "",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://pc.smarthaccpman.com/smh-api/c0065/get_detection",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1150,
    "y": 1080,
    "wires": [
      [
        "a759422aad688388"
      ]
    ]
  },
  {
    "id": "a759422aad688388",
    "type": "debug",
    "z": "3d5f5c20eed11be6",
    "name": "http debug now_2",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1370,
    "y": 1080,
    "wires": []
  },
  {
    "id": "057fe8b2413722c0",
    "type": "inject",
    "z": "3d5f5c20eed11be6",
    "name": "나우 검출 테스트",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 200,
    "y": 700,
    "wires": [
      [
        "338257ab6e133712"
      ]
    ]
  },
  {
    "id": "338257ab6e133712",
    "type": "function",
    "z": "3d5f5c20eed11be6",
    "name": "데이터",
    "func": "// var detectionData = [0x20, 0x38, 0x31, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x0D, 0x0A];\nvar detectionData = [0x20, 0x38, 0x31, 0x20, 0x20, 0x20, 0x20, 0x32, 0x20, 0x31, 0x37, 0x3A, 0x35, 0x30, 0x3A, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30];\n\nmsg.payload = Buffer.from(detectionData);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 700,
    "wires": [
      [
        "09482e797bef4743"
      ]
    ]
  },
  {
    "id": "09482e797bef4743",
    "type": "converter",
    "z": "3d5f5c20eed11be6",
    "name": "decode",
    "from": "ascii",
    "x": 520,
    "y": 700,
    "wires": [
      [
        "219308b3a44e3d69"
      ]
    ]
  }
]